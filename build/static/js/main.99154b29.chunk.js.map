{"version":3,"sources":["contexts/movieProvider.js","components/sortedMovies.js","components/singleMovie.js","components/searchBar.js","App.js","index.js"],"names":["MovieContext","React","createContext","MovieProvider","state","movies","page","totalPages","type","search","fetchMovies","url","_this","undefined","concat","process","axios","get","then","response","setState","data","results","total_pages","catch","err","console","log","setPage","value","handleType","e","_this$setState","Object","defineProperty","target","name","handleSearch","preventDefault","replace","this","movieData","react_default","a","createElement","Provider","actions","props","children","Component","SortedMovies","displayMovies","context","map","movie","Col","key","id","md","className","Link","style","textDecoration","color","to","poster_path","react","Media","src","title","renderPagination","paginationArry","index","push","pagination","PaginationItem","onClick","PaginationLink","_this2","Row","Pagination","previous","next","height","SingleMovie","poster","tagline","genres","genre","release_date","status","moreInfo","overview","vote_average","Progress","max","vote_count","production_companies","company","production_countries","country","runtime","spoken_languages","language","original_language","original_title","revenue","makeCurrency","budget","belongs_to_collection","homepage","href","popularity","backdrop_path","match","params","toString","margin","SearchBar","handleChange","event","onSubmit","history","onChange","placeholder","App","movieProvider","Consumer","Route","render","searchBar","assign","exact","path","sortedMovies","singleMovie","ReactDOM","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.99154b29.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// Importing dependencies axios is used for http request.\r\nimport axios from \"axios\";\r\n// Exporting our context\r\nexport const MovieContext = React.createContext({});\r\n\r\nclass MovieProvider extends Component {\r\n  /* This state will act as our context state,\r\n   we will have access to this inside of all the routes\r\n   that we pass our context into */\r\n  state = {\r\n    movies: [],\r\n    page: 1,\r\n    totalPages: 0,\r\n    type: \"now_playing\",\r\n    search: \"\"\r\n  };\r\n  // this will set up our context whenever our app is loaded\r\n  // allowing for our data to be rendered\r\n  componentDidMount() {\r\n    this.fetchMovies();\r\n  }\r\n  fetchMovies = (page, type, search) => {\r\n    // if the page passed in is greater than current pages than it resets it the page count back to 1\r\n    if (page > this.state.totalPages) page = 1;\r\n    // When page is defined it will be set to that param,\r\n    // When its not we will just set it to the local state\r\n    if (page === undefined) page = this.state.page;\r\n    if (type === undefined) type = this.state.type;\r\n    if (search === undefined) search = this.state.search;\r\n    /* ternary if the search is not an empty string\r\n       it will set our url to the search url\r\n       when it is an empty string than we will use the url for just finding now playing, top rated and popular movies\r\n    */\r\n    let url;\r\n    search !== \"\"\r\n      ? (url = `https://api.themoviedb.org/3/search/movie?api_key=${\r\n          process.env.REACT_APP_TMDB_API_KEY\r\n        }&language=en-US&query=${search}&page=${page}&include_adult=false`)\r\n      : (url = `https://api.themoviedb.org/3/movie/${type}?api_key=${\r\n          process.env.REACT_APP_TMDB_API_KEY\r\n        }&language=en-US&page=${page}&include_adult=false`);\r\n    /* axios.get will make a get request to the server if the request is successfull\r\n     we will get the data from the api back in the form of an object, if it is unsuccessfull\r\n     we will console.log the error */\r\n    axios\r\n      .get(url)\r\n      .then(response => {\r\n        this.setState({\r\n          movies: response.data.results,\r\n          totalPages: response.data.total_pages\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n  // this function allows me to change the state of my context provider by callling this inside of my route\r\n  setPage = value => {\r\n    /* when the value if greater than the total pages\r\n      this will catch it and reset it back to 1\r\n      if it's not than we just set the page to the value passed in */\r\n    if (value > this.state.totalPages) {\r\n      this.setState({ page: 1 });\r\n    } else {\r\n      this.setState({ page: value });\r\n    }\r\n  };\r\n  /* this will take my name and value from my button and use the name to pic the key on state,\r\n   setting the value onto that key\r\n   after it calls fetch movies to change the items rendered */\r\n  handleType = e => {\r\n    this.setState({ [e.target.name]: e.target.value, page: 1 });\r\n    this.fetchMovies(1, e.target.value, \"\");\r\n  };\r\n  // when we search for smething this is the function that is called on submit\r\n  handleSearch = (e, search) => {\r\n    // prevent default helped clear out some errors the application was having\r\n    e.preventDefault();\r\n    // the user enters stings with spaces we remove them and make them pluses for the search request\r\n    search = search.replace(\" \", \"+\");\r\n    // we set search on state to the same thing as the search passed in\r\n    this.setState({ search });\r\n    // call fetch movies to update the component.\r\n    this.fetchMovies(1, \"search\", search);\r\n  };\r\n\r\n  render() {\r\n    // setting the state object to a movieData variables, this will allow me to access it through that name\r\n    const movieData = this.state;\r\n\r\n    return (\r\n      // Setup context provider to pass the data on state. And too pass the methods on class as actions\r\n      <MovieContext.Provider\r\n        value={{\r\n          movieData,\r\n          actions: {\r\n            fetchMovies: this.fetchMovies,\r\n            setPage: this.setPage,\r\n            handleType: this.handleType,\r\n            handleSearch: this.handleSearch\r\n          }\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </MovieContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieProvider;\r\n","import React, { Component, Fragment } from \"react\";\r\n// Using reactstrap and deconstructing the elements i want to use\r\nimport {\r\n  Media,\r\n  Row,\r\n  Col,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink\r\n} from \"reactstrap\";\r\n// importing Link from react router to route my application\r\nimport { Link } from \"react-router-dom\";\r\nclass SortedMovies extends Component {\r\n  // This function renders the array of objects we receive from our context provider\r\n  displayMovies = () => {\r\n    // first we make sure the data is define to prevent any errors\r\n    if (this.props.context.movieData.movies !== undefined) {\r\n      // than we return the context data as we map over it\r\n      return this.props.context.movieData.movies.map(movie => (\r\n        // the Col element from reactstrap it is shourt for column and it limits the size of the data rendered\r\n        // the per row is 12 so setting this to md(medium) of 3 means it will show 4\r\n        // columns per row\r\n        <Col key={movie.id} md=\"3\" className=\"movieImg-container\">\r\n          {/* this is a link from react router dom, I wrapped the whole thing in a Link\r\n        and used a template literal also known as a template string\r\n        to add the id of the object being mapped to the link address\r\n        Also I added a bit of basic in-line styles to just get rid of some of the default styles from Link */}\r\n          <Link\r\n            style={{ textDecoration: \"none\", color: \"black\" }}\r\n            to={`/details/${movie.id}`}\r\n          >\r\n            {/* This uses a ternary and it checks if the movie is missing,\r\n           and if the movie has a poster, if there is a poster than it will use the Media tag\r\n           and a template string to render it,if it does not it will render\r\n           a basic div I styled with the title inside */}\r\n\r\n            {movie.poster_path ? (\r\n              <Fragment>\r\n                <Media\r\n                  src={`https://image.tmdb.org/t/p/original${\r\n                    movie.poster_path\r\n                  }`}\r\n                />\r\n              </Fragment>\r\n            ) : (\r\n              <div className=\"movieImg-missing\">\r\n                <p>{movie.title}</p>\r\n              </div>\r\n            )}\r\n          </Link>\r\n        </Col>\r\n      ));\r\n    }\r\n  };\r\n  // for pagination I have never done this before so I had to come up with something creative\r\n  // this function will render pagination when called.\r\n  renderPagination = () => {\r\n    // set a variable for our context data so we don't need to call the whole string\r\n    const movieData = this.props.context.movieData;\r\n    // set up an empty array\r\n    const paginationArry = [];\r\n\r\n    for (let index = 0; index < 9; index++) {\r\n      // we iterate up to 10 and add the index to the current page pushing that into our empty pagination array\r\n      // this will mean the first number will always just be whatever the page is\r\n      paginationArry.push(movieData.page + index);\r\n    }\r\n    // we map over our newly created pagination array\r\n    return paginationArry.map(pagination => {\r\n      return (\r\n        // fragment alows us to not have to wrapp this in a container\r\n        // because I didn't want to have to wrap my ternary\r\n        <Fragment key={pagination}>\r\n          {/* when the pagination is less than or equal to the total pages\r\n            we will the pagination will stop rendering,\r\n            so pagination is the page + 9 so when if the page is only 8 away from the end of the list\r\n            it will stop rendering anything above the total pages number  \r\n            */}\r\n          {pagination <= movieData.totalPages ? (\r\n            // when you click one of the pagination, the value of it will be set on the page\r\n            // after we call fetch movies allowing the page to be changed without resetting the type or search\r\n            <PaginationItem\r\n              key={pagination}\r\n              onClick={() => [\r\n                this.props.context.actions.setPage(pagination),\r\n                this.props.context.actions.fetchMovies(pagination)\r\n              ]}\r\n            >\r\n              <PaginationLink>{pagination}</PaginationLink>\r\n            </PaginationItem>\r\n          ) : null}\r\n        </Fragment>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"movies-container\">\r\n        {/* we wrapped our display movies component with a row, the row holds the columns\r\n        keeping everything neat  we also called display movies so it would be rendered*/}\r\n        <Row className=\"movieImgs-container\">{this.displayMovies()}</Row>\r\n        {/* this only renders if you are not on the first page\r\n         and it is used to go back a page  */}\r\n        {this.props.context.movieData.totalPages > 1 ? (\r\n          <Pagination>\r\n            {this.props.context.movieData.page - 1 > 0 ? (\r\n              <PaginationItem>\r\n                <PaginationLink\r\n                  previous\r\n                  onClick={() => [\r\n                    this.props.context.actions.setPage(\r\n                      this.props.context.movieData.page - 1\r\n                    ),\r\n                    this.props.context.actions.fetchMovies(\r\n                      this.props.context.movieData.page - 1\r\n                    )\r\n                  ]}\r\n                />\r\n              </PaginationItem>\r\n            ) : null}\r\n            {/* this is where our pagination is being rendered */}\r\n            {this.renderPagination()}\r\n            {/* this is the pagination item will select the next page  */}\r\n            <PaginationItem>\r\n              <PaginationLink\r\n                next\r\n                onClick={() => [\r\n                  this.props.context.actions.setPage(\r\n                    this.props.context.movieData.page + 1\r\n                  ),\r\n                  this.props.context.actions.fetchMovies(\r\n                    this.props.context.movieData.page + 1\r\n                  )\r\n                ]}\r\n              />\r\n            </PaginationItem>\r\n          </Pagination>\r\n        ) : (\r\n          // so if there is no pagination this div will render so the height is maintained\r\n          // and the buttons will not move, it kinda just fills in the gap\r\n          <div style={{ height: \"5.9vh\" }} />\r\n        )}\r\n        {/* here is my row of buttons for selecting a category */}\r\n        <Row className=\"movieBtn-container\">\r\n          {/* \r\n            onClick the buttons call handleType that will take the name and value\r\n            and that will be set on our context state */}\r\n          <Col md=\"3\">\r\n            <button\r\n              name=\"type\"\r\n              value=\"now_playing\"\r\n              onClick={this.props.context.actions.handleType}\r\n              className=\"btn btn-sm animated-button thar-three\"\r\n            >\r\n              Now playing\r\n            </button>{\" \"}\r\n          </Col>\r\n          <Col md=\"3\">\r\n            <button\r\n              name=\"type\"\r\n              value=\"top_rated\"\r\n              onClick={this.props.context.actions.handleType}\r\n              className=\"btn btn-sm animated-button thar-three\"\r\n            >\r\n              Top Rated\r\n            </button>{\" \"}\r\n          </Col>\r\n          <Col md=\"3\">\r\n            <button\r\n              name=\"type\"\r\n              value=\"popular\"\r\n              onClick={this.props.context.actions.handleType}\r\n              className=\"btn btn-sm animated-button thar-three\"\r\n            >\r\n              Popular\r\n            </button>{\" \"}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortedMovies;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Media, Col, Row, Progress } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nclass SingleMovie extends Component {\r\n  state = {\r\n    movie: {}\r\n  };\r\n  componentDidMount() {\r\n    // when the component is rendered it deconstrucs the id from props\r\n    const { id } = this.props.match.params;\r\n    // makes another axios request however this time it gets the movie by the id\r\n    axios\r\n      .get(\r\n        `https://api.themoviedb.org/3/movie/${id}?api_key=${\r\n          process.env.REACT_APP_TMDB_API_KEY\r\n        }`\r\n      )\r\n      .then(response => {\r\n        this.setState({ movie: response.data });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n  // this is where everything on the left inside of the box is being rendered\r\n  poster = () => {\r\n    // this is a check so that this function is not called before state is set up\r\n    // this prevents errors where things try to be rendered before the state is set\r\n    if (this.state.movie !== {}) {\r\n      // set the movie on state into a variable\r\n      const movie = this.state.movie;\r\n      return (\r\n        // this is a col for the left hand side of the row because it's being called first\r\n        <Col\r\n          key={movie.id}\r\n          md=\"5\"\r\n          className=\"movieImg-container singleImg-container\"\r\n        >\r\n          {/* these ternarys just make sure the data was available for the movie,\r\n           if not the data is not rendered */}\r\n          {movie.poster_path ? (\r\n            <Media\r\n              src={`https://image.tmdb.org/t/p/original${movie.poster_path}`}\r\n            />\r\n          ) : null}\r\n\r\n          {movie.title ? (\r\n            <div className=\"movie-title belowMovie-info movie-info\">\r\n              {movie.title}\r\n            </div>\r\n          ) : null}\r\n          {movie.tagline ? (\r\n            <div className=\"movie-tagline belowMovie-info movie-info\">\r\n              {movie.tagline}\r\n            </div>\r\n          ) : null}\r\n\r\n          {movie.genres ? (\r\n            <div className=\"movieGenre-container belowMovie-info movie-info mapedInfo-container\">\r\n              {/* some of the values on the object are arrays we have to map them out  */}\r\n              {movie.genres.map(genre => (\r\n                <div key={genre.name} className=\"movie-genre mapped-info\">\r\n                  {genre.name},\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : null}\r\n          {movie.release_date ? (\r\n            <div className=\"movie-releaseDate belowMovie-info movie-info\">\r\n              {movie.release_date}\r\n            </div>\r\n          ) : null}\r\n          {movie.status ? (\r\n            <div className=\"movie-status belowMovie-info m movie-info \">\r\n              {movie.status}\r\n            </div>\r\n          ) : null}\r\n        </Col>\r\n      );\r\n    }\r\n  };\r\n  makeCurrency(value) {\r\n    // this function takes  the number passed in\r\n    // converts it to a string and makes it into currancy that string is than returned\r\n    return `$${value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}`;\r\n  }\r\n  // this is where everything on the right inside of the box is being rendered\r\n  moreInfo = () => {\r\n    if (this.state.movie !== {}) {\r\n      const movie = this.state.movie;\r\n      return (\r\n        <Col md=\"7\" className=\"moreInfo-container\">\r\n          {movie.overview ? (\r\n            <div className=\"movie-overview  moreInfo-local movie-info \">\r\n              {movie.overview}\r\n            </div>\r\n          ) : null}\r\n\r\n          {movie.vote_average ? (\r\n            <div className=\"movie-rating  moreInfo-local \">\r\n              <div className=\"text-center\">The Movie Database ratings</div>\r\n              {/* adding in a progress bar that has a max of 10\r\n              the number from the Data base comes back btween 0-10 so that will\r\n              allow this progress bar to render correctly */}\r\n              <Progress color=\"warning\" value={movie.vote_average} max={10}>\r\n                {movie.vote_average}\r\n              </Progress>\r\n              Vote Count: {movie.vote_count}\r\n            </div>\r\n          ) : null}\r\n\r\n          {movie.production_companies ? (\r\n            <div className=\"text-center movie-info\">\r\n              Prodution Companies\r\n              <div className=\"  moreInfo-local  mapedInfo-container\">\r\n                {movie.production_companies.map(company => (\r\n                  <div key={company.name} className=\"movie-company mapped-info\">\r\n                    {company.name},\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {movie.production_countries ? (\r\n            <div className=\"text-center movie-info\">\r\n              Produced In\r\n              <div className=\"  moreInfo-local  mapedInfo-container\">\r\n                {movie.production_countries.map(country => (\r\n                  <div key={country.name} className=\"movie-company mapped-info\">\r\n                    {country.name},\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {movie.runtime ? (\r\n            <div className=\"text-center movie-info\">\r\n              Runtime\r\n              <div className=\"movie-revenue  moreInfo-local movie-info \">\r\n                {`${movie.runtime} Minutes`}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n          {movie.spoken_languages ? (\r\n            <div className=\"text-center movie-info\">\r\n              Spoken Languages\r\n              <div className=\"  moreInfo-local  mapedInfo-container\">\r\n                {movie.spoken_languages.map(language => (\r\n                  <div\r\n                    key={language.name}\r\n                    className=\"movie-company mapped-info\"\r\n                  >\r\n                    {language.name},\r\n                  </div>\r\n                ))}\r\n              </div>{\" \"}\r\n            </div>\r\n          ) : null}\r\n\r\n          {movie.original_language ? (\r\n            <div className=\"text-center movie-info\">\r\n              Spoken Languages\r\n              <div className=\"movie-orignalLang  moreInfo-local movie-info \">\r\n                {movie.original_language}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {movie.original_title && movie.original_title !== movie.title ? (\r\n            <div className=\"text-center movie-info\">\r\n              Original title\r\n              <div className=\"movie-originalTitle  moreInfo-local movie-info \">\r\n                {movie.original_title}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {movie.revenue ? (\r\n            <div className=\"text-center movie-info\">\r\n              Movie Revenue\r\n              <div className=\"movie-revenue  moreInfo-local movie-info \">\r\n                {/* we pass the value to make currancy in order to return it as a human readable string\r\n              not just a number like 100000000 */}\r\n                {this.makeCurrency(movie.revenue)}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n          {movie.budget ? (\r\n            <div className=\"text-center movie-info\">\r\n              Movie Budget\r\n              <div className=\"movie-budget  moreInfo-local movie-info \">\r\n                {this.makeCurrency(movie.budget)}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n          {movie.belongs_to_collection ? (\r\n            <div className=\"text-center movie-info\">\r\n              Collection\r\n              <div className=\"movie-collection  moreInfo-local movie-info \">\r\n                {movie.belongs_to_collection.name}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n          {movie.homepage ? (\r\n            <div className=\"movie-homepage  moreInfo-local movie-info \">\r\n              {/* we use the data to render a link the user can click it and view that content */}\r\n              <a href={movie.homepage}>{movie.homepage}</a>\r\n            </div>\r\n          ) : null}\r\n\r\n          {movie.popularity ? (\r\n            <div className=\"text-center movie-info\">\r\n              Popularity\r\n              <div className=\"movie-popularity  moreInfo-local movie-info \">\r\n                {movie.popularity}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n          {movie.backdrop_path ? (\r\n            <div className=\"movie-backdrop  moreInfo-local movie-info \">\r\n              {/* we use an href and a template string to allow the user to click the text and see the image on the movie database */}\r\n              <a\r\n                href={`https://image.tmdb.org/t/p/original${\r\n                  movie.backdrop_path\r\n                }`}\r\n              >\r\n                View Backdrop\r\n              </a>\r\n            </div>\r\n          ) : null}\r\n          {movie.poster_path ? (\r\n            <div className=\"movie-poster  moreInfo-local movie-info \">\r\n              <a\r\n                href={`https://image.tmdb.org/t/p/original${movie.poster_path}`}\r\n              >\r\n                View Poster\r\n              </a>\r\n            </div>\r\n          ) : null}\r\n        </Col>\r\n      );\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"movies-container singleMovie-container\">\r\n        {/* this row is a container for our render functions, that render the left and right half of the box respectively */}\r\n        <Row className=\"movieImgs-container\">\r\n          {this.poster()}\r\n          {this.moreInfo()}\r\n        </Row>\r\n        {/* this is just our home button, its the same as the category buttons\r\n          for styling however this one links the user back to the home page */}\r\n        <Col md=\"3\" style={{ margin: \"0 auto\" }}>\r\n          <Link to=\"/\">\r\n            {\" \"}\r\n            <button\r\n              name=\"type\"\r\n              value=\"popular\"\r\n              className=\"btn btn-sm animated-button thar-three\"\r\n            >\r\n              Home\r\n            </button>\r\n          </Link>\r\n        </Col>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SingleMovie;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nclass SearchBar extends Component {\r\n  state = {\r\n    search: \"\"\r\n  };\r\n  // simple handle change function takes the name from the event listener and the value and uses that to set up our state\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n  render() {\r\n    return (\r\n      // our form has an unsubmit that calls handle search and resets the search bar data\r\n      <form\r\n        className=\"container\"\r\n        onSubmit={event => [\r\n          this.props.handleSearch(event, this.state.search),\r\n          this.setState({ search: \"\" }),\r\n          this.props.history.push(\"/\")\r\n        ]}\r\n      >\r\n        {/* this is the logo that is set on the left corner of the page */}\r\n        <Link style={{ textDecoration: \"none\", color: \"black\" }} to=\"/\">\r\n          <div className=\"logo\">\r\n            {\" \"}\r\n            <i className=\"fas fa-chess-knight fa-2x\" />\r\n            <p> Movie Knight</p>\r\n          </div>\r\n        </Link>\r\n        {/* when you type into the input the listener will hear it and that will call the handle change\r\n        handle change will than take the name and value of the search and set that on state  */}\r\n        <input\r\n          value={this.state.search}\r\n          name=\"search\"\r\n          onChange={this.handleChange}\r\n          type=\"text\"\r\n          className=\"searchTerm\"\r\n          placeholder=\"Search...\"\r\n        />\r\n        <button type=\"submit\" className=\"searchButton\">\r\n          <i className=\"fa fa-search\" />\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","// Added Fragment to the boilder import of create-react-app\n// this allows me to create returns that are not wrapped locally with proper JSX\nimport React, { Component, Fragment } from \"react\";\n// importing route from react-router-dom\nimport { Route } from \"react-router-dom\";\n// Importing in the context provider\nimport MovieProvider, { MovieContext } from \"./contexts/movieProvider\";\n// Importing my components here, these will be rendered in the routes section below\nimport SortedMovies from \"./components/sortedMovies\";\nimport SingleMovie from \"./components/singleMovie\";\nimport SearchBar from \"./components/searchBar\";\nimport \"./css/App.css\";\nimport \"./css/index.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Wrapping my routes in my provider and context Consumer */}\n\n        <MovieProvider>\n          <MovieContext.Consumer>\n            {/* this is a child of Consumer, it is a render prop I called it context just to keep it simple */}\n            {context => (\n              <Fragment>\n                <Route\n                  render={props => (\n                    <SearchBar\n                      handleSearch={context.actions.handleSearch}\n                      {...props}\n                    />\n                  )}\n                />\n                <Route\n                  exact\n                  path=\"/\"\n                  render={() => <SortedMovies context={context} />}\n                />\n              </Fragment>\n            )}\n          </MovieContext.Consumer>\n        </MovieProvider>\n        {/* the details component does not need context however it will need props for pulling the id form the params */}\n        <Route\n          exact\n          path=\"/details/:id\"\n          render={props => <SingleMovie {...props} />}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}