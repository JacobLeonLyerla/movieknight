{"version":3,"sources":["contexts/movieProvider.js","components/sortedMovies.js","components/singleMovie.js","components/searchBar.js","App.js","index.js"],"names":["MovieContext","React","createContext","MovieProvider","state","movies","page","totalPages","type","search","fetchMovies","url","undefined","_this","concat","process","axios","get","then","response","console","log","data","setState","results","total_pages","setPage","handleType","e","_this$setState","Object","defineProperty","target","name","value","handleSearch","preventDefault","replace","this","movieData","react_default","a","createElement","Provider","actions","props","children","Component","SortedMovies","displayMovies","context","map","movie","Col","key","id","md","style","minHeight","Link","textDecoration","color","to","poster_path","react","Media","width","margin","src","fontSize","title","_this2","Row","onClick","display","flexDirection","justifyContent","marginRight","SingleMovie","showBasicInfo","match","params","SearchBar","handleChange","className","onSubmit","onChange","placeholder","App","movieProvider","Consumer","searchBar","Route","exact","path","render","sortedMovies","singleMovie","ReactDOM","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a097247b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// Importing dependencies axios is used for http request.\r\nimport axios from \"axios\";\r\n// Exporting our context\r\nexport const MovieContext = React.createContext({});\r\n\r\nclass MovieProvider extends Component {\r\n  // This state will act as our context state,\r\n  // we will have access to this inside of all the routes\r\n  // that we pass our context into\r\n  state = {\r\n    movies: [],\r\n    page: 1,\r\n    totalPages: 0,\r\n    type: \"now_playing\",\r\n    search: \"\"\r\n  };\r\n  // this will set up our context whenever our app is loaded\r\n  // allowing for our data to be rendered\r\n  componentDidMount() {\r\n    this.fetchMovies();\r\n  }\r\n  fetchMovies = (page, type, search) => {\r\n    // When page is defined it will be set to that param,\r\n    // When its not we will just set it to the local state\r\n    if (page === undefined) page = this.state.page;\r\n    if (type === undefined) type = this.state.type;\r\n    let url;\r\n    search\r\n      ? (url = `https://api.themoviedb.org/3/${type}/movie?api_key=${\r\n          process.env.REACT_APP_TMDB_API_KEY\r\n        }&query=${search}`)\r\n      : (url = `https://api.themoviedb.org/3/movie/${type}?api_key=${\r\n          process.env.REACT_APP_TMDB_API_KEY\r\n        }&language=en-US&page=${page}`);\r\n    // Making a call to the database to see how the data comes back and testing my key\r\n    // This call will get a list of movies currently in theaters\r\n    axios.get(url).then(response => {\r\n      console.log(response.data)\r\n      this.setState({\r\n        movies: response.data.results,\r\n        totalPages: response.data.total_pages\r\n      });\r\n    });\r\n  };\r\n  // this function allows me to change the state of my context provider by callling this inside of my route\r\n  setPage = () => {\r\n    this.setState({ page: this.state.page + 1 });\r\n  };\r\n  // this will take my name and value from my button and use the name to pic the key on state,\r\n  // setting the value onto that key\r\n  // after it calls fetch movies to change the items rendered\r\n  handleType = e => {\r\n    this.setState({ [e.target.name]: e.target.value, page: 1 });\r\n    this.fetchMovies(1, e.target.value);\r\n  };\r\n\r\n  handleSearch = (e, search) => {\r\n    e.preventDefault();\r\n    search = search.replace(\" \", \"+\");\r\n    this.setState({ search });\r\n    this.fetchMovies(1, \"search\", search);\r\n  };\r\n\r\n  render() {\r\n    // setting the state object to a movieData variables, this will allow me to access it through that name\r\n    const movieData = this.state;\r\n\r\n    return (\r\n      // Setup context provider to pass the data on state. And too pass the methods on class as actions\r\n      <MovieContext.Provider\r\n        value={{\r\n          movieData,\r\n          actions: {\r\n            fetchMovies: this.fetchMovies,\r\n            setPage: this.setPage,\r\n            handleType: this.handleType,\r\n            handleSearch: this.handleSearch\r\n          }\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </MovieContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieProvider;\r\n","import React, { Component,Fragment } from \"react\";\r\n// Using reactstrap and deconstructing the elements i want to use\r\nimport { Media, Row, Col } from \"reactstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nclass SortedMovies extends Component {\r\n  displayMovies = () => {\r\n    if (this.props.context.movieData.movies !== undefined) {\r\n      return this.props.context.movieData.movies.map(movie => (\r\n        <Col key={movie.id} md=\"1\" style={{ minHeight: \"25vh\" }}>\r\n          <Link   style={{ textDecoration: \"none\",color:\"black\" }} to={`/details/${movie.id}`}>\r\n          {/* Using my reactstrap Media component in order to render the jpg image that is stored,\r\n          inside of the movie object, this is just a test however i would like to use this\r\n          on the movie view, where we will show the single movie and it's details */}\r\n          {(movie.poster_path !==null)?(<Fragment><Media\r\n            style={{ width: \"5vw\", margin: \"0 auto\" }}\r\n            src={`https://image.tmdb.org/t/p/original${movie.poster_path}`}\r\n          /></Fragment>):null}\r\n          <div style={{ fontSize: \"1vw\", minHeight: \"7vh\" }}>{movie.title}</div>\r\n        </Link></Col>\r\n        \r\n      ));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Row>{this.displayMovies()}</Row>\r\n        {/* Display the local total number of pages for the data that was gotten in data base request */}\r\n        <div>{this.props.context.movieData.totalPages}</div>\r\n        {/* First we display the current page */}\r\n        <div>\r\n          {this.props.context.movieData.page}\r\n          {/* When we click this div it will fire an on click event\r\n          This event will first change add to the value on state,\r\n          than it will run fetch movies passing in the same value that we just set.\r\n          our fetch has a catch saying if a value is passed in than use that value.\r\n          if not it just uses our state */}\r\n          <div\r\n            onClick={() => [\r\n              this.props.context.actions.setPage(),\r\n              this.props.context.actions.fetchMovies(\r\n                this.props.context.movieData.page + 1\r\n              )\r\n            ]}\r\n          >\r\n            up\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"center\"\r\n            }}\r\n          >\r\n            <button\r\n              style={{ marginRight: \".6vw\" }}\r\n              name=\"type\"\r\n              value=\"now_playing\"\r\n              onClick={this.props.context.actions.handleType}\r\n            >\r\n              Now Playing\r\n            </button>\r\n            <button\r\n              style={{ marginRight: \".6vw\" }}\r\n              name=\"type\"\r\n              value=\"top_rated\"\r\n              onClick={this.props.context.actions.handleType}\r\n            >\r\n              Top Rated\r\n            </button>\r\n            <button\r\n              style={{ marginRight: \".6vw\" }}\r\n              name=\"type\"\r\n              value=\"popular\"\r\n              onClick={this.props.context.actions.handleType}\r\n            >\r\n              Popular\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortedMovies;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Media } from \"reactstrap\";\r\nclass SingleMovie extends Component {\r\n  state = {\r\n    movie: {}\r\n  };\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    axios\r\n      .get(\r\n        `https://api.themoviedb.org/3/movie/${id}?api_key=${\r\n          process.env.REACT_APP_TMDB_API_KEY\r\n        }`\r\n      )\r\n      .then(response => {\r\n        this.setState({ movie: response.data });\r\n      });\r\n  }\r\n  showBasicInfo = () => {\r\n    const movie = this.state.movie;\r\n    return (\r\n      <div>\r\n        {movie.title}\r\n        <Media\r\n          style={{ width: \"5vw\", margin: \"0 auto\" }}\r\n          src={`https://image.tmdb.org/t/p/original${movie.poster_path}`}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  render() {\r\n    return <Fragment>{this.showBasicInfo()}</Fragment>;\r\n  }\r\n}\r\n\r\nexport default SingleMovie;\r\n","import React, { Component } from \"react\";\r\nclass SearchBar extends Component {\r\n  state = {\r\n    search: \"\"\r\n  };\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  render() {\r\n    return (\r\n      // Basic search bar for testing purposes\r\n      <form className=\"container\" onSubmit={(e)=>[this.props.handleSearch(e,this.state.search),this.setState({search:\"\"})]}>\r\n        \r\n          <input\r\n            value={this.state.search}\r\n            name=\"search\"\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            className=\"searchTerm\"\r\n            placeholder=\"Search...\"\r\n          />\r\n          <button type=\"submit\" className=\"searchButton\">\r\n            <i className=\"fa fa-search\" />\r\n          </button>\r\n        \r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","// Added Fragment to the boilder import of create-react-app\n// this allows me to create returns that are not wrapped locally with proper JSX\nimport React, { Component, Fragment } from \"react\";\n// importing route from react-router-dom\nimport { Route } from \"react-router-dom\";\n// Importing in the context provider\nimport MovieProvider, { MovieContext } from \"./contexts/movieProvider\";\n// Importing my components here, these will be rendered in the routes section below\nimport SortedMovies from \"./components/sortedMovies\";\nimport SingleMovie from \"./components/singleMovie\";\nimport SearchBar from \"./components/searchBar\";\nimport \"./css/App.css\";\nimport \"./css/index.css\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Wrapping my routes in my provider and context Consumer */}\n        \n        <MovieProvider>\n          <MovieContext.Consumer>\n            {/* this is a child of Consumer, it is a render prop I called it context just to keep it simple */}\n            {context => (\n              <Fragment>\n                <SearchBar handleSearch={context.actions.handleSearch}/>\n                <Route\n                  exact\n                  path=\"/\"\n                  render={() => <SortedMovies context={context} />}\n                />   \n              </Fragment>\n            )}\n          </MovieContext.Consumer>\n        </MovieProvider>\n         <Route\n            exact\n            path=\"/details/:id\"\n            render={props => <SingleMovie {...props}/>}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\nimport React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n    document.getElementById(\"root\")\n  );"],"sourceRoot":""}